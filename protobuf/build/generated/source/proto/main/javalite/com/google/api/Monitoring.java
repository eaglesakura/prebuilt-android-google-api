// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/monitoring.proto

package com.google.api;

/**
 * <pre>
 * Monitoring configuration of the service.
 * The example below shows how to configure monitored resources and metrics
 * for monitoring. In the example, a monitored resource and two metrics are
 * defined. The `library.googleapis.com/book/returned_count` metric is sent
 * to both producer and consumer projects, whereas the
 * `library.googleapis.com/book/overdue_count` metric is only sent to the
 * consumer project.
 *     monitored_resources:
 *     - type: library.googleapis.com/branch
 *       labels:
 *       - key: /city
 *         description: The city where the library branch is located in.
 *       - key: /name
 *         description: The name of the branch.
 *     metrics:
 *     - name: library.googleapis.com/book/returned_count
 *       metric_kind: DELTA
 *       value_type: INT64
 *       labels:
 *       - key: /customer_id
 *     - name: library.googleapis.com/book/overdue_count
 *       metric_kind: GAUGE
 *       value_type: INT64
 *       labels:
 *       - key: /customer_id
 *     monitoring:
 *       producer_destinations:
 *       - monitored_resource: library.googleapis.com/branch
 *         metrics:
 *         - library.googleapis.com/book/returned_count
 *       consumer_destinations:
 *       - monitored_resource: library.googleapis.com/branch
 *         metrics:
 *         - library.googleapis.com/book/returned_count
 *         - library.googleapis.com/book/overdue_count
 * </pre>
 *
 * Protobuf type {@code google.api.Monitoring}
 */
public  final class Monitoring extends
    com.google.protobuf.GeneratedMessageLite<
        Monitoring, Monitoring.Builder> implements
    // @@protoc_insertion_point(message_implements:google.api.Monitoring)
    MonitoringOrBuilder {
  private Monitoring() {
    producerDestinations_ = emptyProtobufList();
    consumerDestinations_ = emptyProtobufList();
  }
  public interface MonitoringDestinationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.api.Monitoring.MonitoringDestination)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The monitored resource type. The type must be defined in
     * [Service.monitored_resources][google.api.Service.monitored_resources] section.
     * </pre>
     *
     * <code>optional string monitored_resource = 1;</code>
     */
    java.lang.String getMonitoredResource();
    /**
     * <pre>
     * The monitored resource type. The type must be defined in
     * [Service.monitored_resources][google.api.Service.monitored_resources] section.
     * </pre>
     *
     * <code>optional string monitored_resource = 1;</code>
     */
    com.google.protobuf.ByteString
        getMonitoredResourceBytes();

    /**
     * <pre>
     * Names of the metrics to report to this monitoring destination.
     * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
     * </pre>
     *
     * <code>repeated string metrics = 2;</code>
     */
    java.util.List<String>
        getMetricsList();
    /**
     * <pre>
     * Names of the metrics to report to this monitoring destination.
     * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
     * </pre>
     *
     * <code>repeated string metrics = 2;</code>
     */
    int getMetricsCount();
    /**
     * <pre>
     * Names of the metrics to report to this monitoring destination.
     * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
     * </pre>
     *
     * <code>repeated string metrics = 2;</code>
     */
    java.lang.String getMetrics(int index);
    /**
     * <pre>
     * Names of the metrics to report to this monitoring destination.
     * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
     * </pre>
     *
     * <code>repeated string metrics = 2;</code>
     */
    com.google.protobuf.ByteString
        getMetricsBytes(int index);
  }
  /**
   * <pre>
   * Configuration of a specific monitoring destination (the producer project
   * or the consumer project).
   * </pre>
   *
   * Protobuf type {@code google.api.Monitoring.MonitoringDestination}
   */
  public  static final class MonitoringDestination extends
      com.google.protobuf.GeneratedMessageLite<
          MonitoringDestination, MonitoringDestination.Builder> implements
      // @@protoc_insertion_point(message_implements:google.api.Monitoring.MonitoringDestination)
      MonitoringDestinationOrBuilder {
    private MonitoringDestination() {
      monitoredResource_ = "";
      metrics_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    private int bitField0_;
    public static final int MONITORED_RESOURCE_FIELD_NUMBER = 1;
    private java.lang.String monitoredResource_;
    /**
     * <pre>
     * The monitored resource type. The type must be defined in
     * [Service.monitored_resources][google.api.Service.monitored_resources] section.
     * </pre>
     *
     * <code>optional string monitored_resource = 1;</code>
     */
    public java.lang.String getMonitoredResource() {
      return monitoredResource_;
    }
    /**
     * <pre>
     * The monitored resource type. The type must be defined in
     * [Service.monitored_resources][google.api.Service.monitored_resources] section.
     * </pre>
     *
     * <code>optional string monitored_resource = 1;</code>
     */
    public com.google.protobuf.ByteString
        getMonitoredResourceBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(monitoredResource_);
    }
    /**
     * <pre>
     * The monitored resource type. The type must be defined in
     * [Service.monitored_resources][google.api.Service.monitored_resources] section.
     * </pre>
     *
     * <code>optional string monitored_resource = 1;</code>
     */
    private void setMonitoredResource(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      monitoredResource_ = value;
    }
    /**
     * <pre>
     * The monitored resource type. The type must be defined in
     * [Service.monitored_resources][google.api.Service.monitored_resources] section.
     * </pre>
     *
     * <code>optional string monitored_resource = 1;</code>
     */
    private void clearMonitoredResource() {
      
      monitoredResource_ = getDefaultInstance().getMonitoredResource();
    }
    /**
     * <pre>
     * The monitored resource type. The type must be defined in
     * [Service.monitored_resources][google.api.Service.monitored_resources] section.
     * </pre>
     *
     * <code>optional string monitored_resource = 1;</code>
     */
    private void setMonitoredResourceBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      monitoredResource_ = value.toStringUtf8();
    }

    public static final int METRICS_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.ProtobufList<String> metrics_;
    /**
     * <pre>
     * Names of the metrics to report to this monitoring destination.
     * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
     * </pre>
     *
     * <code>repeated string metrics = 2;</code>
     */
    public java.util.List<String> getMetricsList() {
      return metrics_;
    }
    /**
     * <pre>
     * Names of the metrics to report to this monitoring destination.
     * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
     * </pre>
     *
     * <code>repeated string metrics = 2;</code>
     */
    public int getMetricsCount() {
      return metrics_.size();
    }
    /**
     * <pre>
     * Names of the metrics to report to this monitoring destination.
     * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
     * </pre>
     *
     * <code>repeated string metrics = 2;</code>
     */
    public java.lang.String getMetrics(int index) {
      return metrics_.get(index);
    }
    /**
     * <pre>
     * Names of the metrics to report to this monitoring destination.
     * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
     * </pre>
     *
     * <code>repeated string metrics = 2;</code>
     */
    public com.google.protobuf.ByteString
        getMetricsBytes(int index) {
      return com.google.protobuf.ByteString.copyFromUtf8(
          metrics_.get(index));
    }
    private void ensureMetricsIsMutable() {
      if (!metrics_.isModifiable()) {
        metrics_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(metrics_);
       }
    }
    /**
     * <pre>
     * Names of the metrics to report to this monitoring destination.
     * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
     * </pre>
     *
     * <code>repeated string metrics = 2;</code>
     */
    private void setMetrics(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureMetricsIsMutable();
      metrics_.set(index, value);
    }
    /**
     * <pre>
     * Names of the metrics to report to this monitoring destination.
     * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
     * </pre>
     *
     * <code>repeated string metrics = 2;</code>
     */
    private void addMetrics(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureMetricsIsMutable();
      metrics_.add(value);
    }
    /**
     * <pre>
     * Names of the metrics to report to this monitoring destination.
     * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
     * </pre>
     *
     * <code>repeated string metrics = 2;</code>
     */
    private void addAllMetrics(
        java.lang.Iterable<java.lang.String> values) {
      ensureMetricsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, metrics_);
    }
    /**
     * <pre>
     * Names of the metrics to report to this monitoring destination.
     * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
     * </pre>
     *
     * <code>repeated string metrics = 2;</code>
     */
    private void clearMetrics() {
      metrics_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <pre>
     * Names of the metrics to report to this monitoring destination.
     * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
     * </pre>
     *
     * <code>repeated string metrics = 2;</code>
     */
    private void addMetricsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureMetricsIsMutable();
      metrics_.add(value.toStringUtf8());
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!monitoredResource_.isEmpty()) {
        output.writeString(1, getMonitoredResource());
      }
      for (int i = 0; i < metrics_.size(); i++) {
        output.writeString(2, metrics_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!monitoredResource_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getMonitoredResource());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < metrics_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeStringSizeNoTag(metrics_.get(i));
        }
        size += dataSize;
        size += 1 * getMetricsList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.api.Monitoring.MonitoringDestination parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.api.Monitoring.MonitoringDestination parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.api.Monitoring.MonitoringDestination parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.api.Monitoring.MonitoringDestination parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.api.Monitoring.MonitoringDestination parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.api.Monitoring.MonitoringDestination parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.api.Monitoring.MonitoringDestination parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.api.Monitoring.MonitoringDestination parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.api.Monitoring.MonitoringDestination parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.api.Monitoring.MonitoringDestination parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.api.Monitoring.MonitoringDestination prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Configuration of a specific monitoring destination (the producer project
     * or the consumer project).
     * </pre>
     *
     * Protobuf type {@code google.api.Monitoring.MonitoringDestination}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.api.Monitoring.MonitoringDestination, Builder> implements
        // @@protoc_insertion_point(builder_implements:google.api.Monitoring.MonitoringDestination)
        com.google.api.Monitoring.MonitoringDestinationOrBuilder {
      // Construct using com.google.api.Monitoring.MonitoringDestination.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The monitored resource type. The type must be defined in
       * [Service.monitored_resources][google.api.Service.monitored_resources] section.
       * </pre>
       *
       * <code>optional string monitored_resource = 1;</code>
       */
      public java.lang.String getMonitoredResource() {
        return instance.getMonitoredResource();
      }
      /**
       * <pre>
       * The monitored resource type. The type must be defined in
       * [Service.monitored_resources][google.api.Service.monitored_resources] section.
       * </pre>
       *
       * <code>optional string monitored_resource = 1;</code>
       */
      public com.google.protobuf.ByteString
          getMonitoredResourceBytes() {
        return instance.getMonitoredResourceBytes();
      }
      /**
       * <pre>
       * The monitored resource type. The type must be defined in
       * [Service.monitored_resources][google.api.Service.monitored_resources] section.
       * </pre>
       *
       * <code>optional string monitored_resource = 1;</code>
       */
      public Builder setMonitoredResource(
          java.lang.String value) {
        copyOnWrite();
        instance.setMonitoredResource(value);
        return this;
      }
      /**
       * <pre>
       * The monitored resource type. The type must be defined in
       * [Service.monitored_resources][google.api.Service.monitored_resources] section.
       * </pre>
       *
       * <code>optional string monitored_resource = 1;</code>
       */
      public Builder clearMonitoredResource() {
        copyOnWrite();
        instance.clearMonitoredResource();
        return this;
      }
      /**
       * <pre>
       * The monitored resource type. The type must be defined in
       * [Service.monitored_resources][google.api.Service.monitored_resources] section.
       * </pre>
       *
       * <code>optional string monitored_resource = 1;</code>
       */
      public Builder setMonitoredResourceBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setMonitoredResourceBytes(value);
        return this;
      }

      /**
       * <pre>
       * Names of the metrics to report to this monitoring destination.
       * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
       * </pre>
       *
       * <code>repeated string metrics = 2;</code>
       */
      public java.util.List<String>
          getMetricsList() {
        return java.util.Collections.unmodifiableList(
            instance.getMetricsList());
      }
      /**
       * <pre>
       * Names of the metrics to report to this monitoring destination.
       * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
       * </pre>
       *
       * <code>repeated string metrics = 2;</code>
       */
      public int getMetricsCount() {
        return instance.getMetricsCount();
      }
      /**
       * <pre>
       * Names of the metrics to report to this monitoring destination.
       * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
       * </pre>
       *
       * <code>repeated string metrics = 2;</code>
       */
      public java.lang.String getMetrics(int index) {
        return instance.getMetrics(index);
      }
      /**
       * <pre>
       * Names of the metrics to report to this monitoring destination.
       * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
       * </pre>
       *
       * <code>repeated string metrics = 2;</code>
       */
      public com.google.protobuf.ByteString
          getMetricsBytes(int index) {
        return instance.getMetricsBytes(index);
      }
      /**
       * <pre>
       * Names of the metrics to report to this monitoring destination.
       * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
       * </pre>
       *
       * <code>repeated string metrics = 2;</code>
       */
      public Builder setMetrics(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setMetrics(index, value);
        return this;
      }
      /**
       * <pre>
       * Names of the metrics to report to this monitoring destination.
       * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
       * </pre>
       *
       * <code>repeated string metrics = 2;</code>
       */
      public Builder addMetrics(
          java.lang.String value) {
        copyOnWrite();
        instance.addMetrics(value);
        return this;
      }
      /**
       * <pre>
       * Names of the metrics to report to this monitoring destination.
       * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
       * </pre>
       *
       * <code>repeated string metrics = 2;</code>
       */
      public Builder addAllMetrics(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllMetrics(values);
        return this;
      }
      /**
       * <pre>
       * Names of the metrics to report to this monitoring destination.
       * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
       * </pre>
       *
       * <code>repeated string metrics = 2;</code>
       */
      public Builder clearMetrics() {
        copyOnWrite();
        instance.clearMetrics();
        return this;
      }
      /**
       * <pre>
       * Names of the metrics to report to this monitoring destination.
       * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
       * </pre>
       *
       * <code>repeated string metrics = 2;</code>
       */
      public Builder addMetricsBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addMetricsBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:google.api.Monitoring.MonitoringDestination)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.api.Monitoring.MonitoringDestination();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          metrics_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.api.Monitoring.MonitoringDestination other = (com.google.api.Monitoring.MonitoringDestination) arg1;
          monitoredResource_ = visitor.visitString(!monitoredResource_.isEmpty(), monitoredResource_,
              !other.monitoredResource_.isEmpty(), other.monitoredResource_);
          metrics_= visitor.visitList(metrics_, other.metrics_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  monitoredResource_ = s;
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();
                  if (!metrics_.isModifiable()) {
                    metrics_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(metrics_);
                  }
                  metrics_.add(s);
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.api.Monitoring.MonitoringDestination.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:google.api.Monitoring.MonitoringDestination)
    private static final com.google.api.Monitoring.MonitoringDestination DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new MonitoringDestination();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.api.Monitoring.MonitoringDestination getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<MonitoringDestination> PARSER;

    public static com.google.protobuf.Parser<MonitoringDestination> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public static final int PRODUCER_DESTINATIONS_FIELD_NUMBER = 1;
  private com.google.protobuf.Internal.ProtobufList<com.google.api.Monitoring.MonitoringDestination> producerDestinations_;
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the producer project.
   * There can be multiple producer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one producer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
   */
  public java.util.List<com.google.api.Monitoring.MonitoringDestination> getProducerDestinationsList() {
    return producerDestinations_;
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the producer project.
   * There can be multiple producer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one producer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
   */
  public java.util.List<? extends com.google.api.Monitoring.MonitoringDestinationOrBuilder> 
      getProducerDestinationsOrBuilderList() {
    return producerDestinations_;
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the producer project.
   * There can be multiple producer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one producer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
   */
  public int getProducerDestinationsCount() {
    return producerDestinations_.size();
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the producer project.
   * There can be multiple producer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one producer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
   */
  public com.google.api.Monitoring.MonitoringDestination getProducerDestinations(int index) {
    return producerDestinations_.get(index);
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the producer project.
   * There can be multiple producer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one producer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
   */
  public com.google.api.Monitoring.MonitoringDestinationOrBuilder getProducerDestinationsOrBuilder(
      int index) {
    return producerDestinations_.get(index);
  }
  private void ensureProducerDestinationsIsMutable() {
    if (!producerDestinations_.isModifiable()) {
      producerDestinations_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(producerDestinations_);
     }
  }

  /**
   * <pre>
   * Monitoring configurations for sending metrics to the producer project.
   * There can be multiple producer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one producer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
   */
  private void setProducerDestinations(
      int index, com.google.api.Monitoring.MonitoringDestination value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureProducerDestinationsIsMutable();
    producerDestinations_.set(index, value);
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the producer project.
   * There can be multiple producer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one producer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
   */
  private void setProducerDestinations(
      int index, com.google.api.Monitoring.MonitoringDestination.Builder builderForValue) {
    ensureProducerDestinationsIsMutable();
    producerDestinations_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the producer project.
   * There can be multiple producer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one producer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
   */
  private void addProducerDestinations(com.google.api.Monitoring.MonitoringDestination value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureProducerDestinationsIsMutable();
    producerDestinations_.add(value);
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the producer project.
   * There can be multiple producer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one producer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
   */
  private void addProducerDestinations(
      int index, com.google.api.Monitoring.MonitoringDestination value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureProducerDestinationsIsMutable();
    producerDestinations_.add(index, value);
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the producer project.
   * There can be multiple producer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one producer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
   */
  private void addProducerDestinations(
      com.google.api.Monitoring.MonitoringDestination.Builder builderForValue) {
    ensureProducerDestinationsIsMutable();
    producerDestinations_.add(builderForValue.build());
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the producer project.
   * There can be multiple producer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one producer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
   */
  private void addProducerDestinations(
      int index, com.google.api.Monitoring.MonitoringDestination.Builder builderForValue) {
    ensureProducerDestinationsIsMutable();
    producerDestinations_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the producer project.
   * There can be multiple producer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one producer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
   */
  private void addAllProducerDestinations(
      java.lang.Iterable<? extends com.google.api.Monitoring.MonitoringDestination> values) {
    ensureProducerDestinationsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, producerDestinations_);
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the producer project.
   * There can be multiple producer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one producer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
   */
  private void clearProducerDestinations() {
    producerDestinations_ = emptyProtobufList();
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the producer project.
   * There can be multiple producer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one producer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
   */
  private void removeProducerDestinations(int index) {
    ensureProducerDestinationsIsMutable();
    producerDestinations_.remove(index);
  }

  public static final int CONSUMER_DESTINATIONS_FIELD_NUMBER = 2;
  private com.google.protobuf.Internal.ProtobufList<com.google.api.Monitoring.MonitoringDestination> consumerDestinations_;
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the consumer project.
   * There can be multiple consumer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one consumer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
   */
  public java.util.List<com.google.api.Monitoring.MonitoringDestination> getConsumerDestinationsList() {
    return consumerDestinations_;
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the consumer project.
   * There can be multiple consumer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one consumer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
   */
  public java.util.List<? extends com.google.api.Monitoring.MonitoringDestinationOrBuilder> 
      getConsumerDestinationsOrBuilderList() {
    return consumerDestinations_;
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the consumer project.
   * There can be multiple consumer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one consumer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
   */
  public int getConsumerDestinationsCount() {
    return consumerDestinations_.size();
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the consumer project.
   * There can be multiple consumer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one consumer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
   */
  public com.google.api.Monitoring.MonitoringDestination getConsumerDestinations(int index) {
    return consumerDestinations_.get(index);
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the consumer project.
   * There can be multiple consumer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one consumer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
   */
  public com.google.api.Monitoring.MonitoringDestinationOrBuilder getConsumerDestinationsOrBuilder(
      int index) {
    return consumerDestinations_.get(index);
  }
  private void ensureConsumerDestinationsIsMutable() {
    if (!consumerDestinations_.isModifiable()) {
      consumerDestinations_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(consumerDestinations_);
     }
  }

  /**
   * <pre>
   * Monitoring configurations for sending metrics to the consumer project.
   * There can be multiple consumer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one consumer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
   */
  private void setConsumerDestinations(
      int index, com.google.api.Monitoring.MonitoringDestination value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureConsumerDestinationsIsMutable();
    consumerDestinations_.set(index, value);
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the consumer project.
   * There can be multiple consumer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one consumer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
   */
  private void setConsumerDestinations(
      int index, com.google.api.Monitoring.MonitoringDestination.Builder builderForValue) {
    ensureConsumerDestinationsIsMutable();
    consumerDestinations_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the consumer project.
   * There can be multiple consumer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one consumer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
   */
  private void addConsumerDestinations(com.google.api.Monitoring.MonitoringDestination value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureConsumerDestinationsIsMutable();
    consumerDestinations_.add(value);
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the consumer project.
   * There can be multiple consumer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one consumer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
   */
  private void addConsumerDestinations(
      int index, com.google.api.Monitoring.MonitoringDestination value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureConsumerDestinationsIsMutable();
    consumerDestinations_.add(index, value);
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the consumer project.
   * There can be multiple consumer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one consumer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
   */
  private void addConsumerDestinations(
      com.google.api.Monitoring.MonitoringDestination.Builder builderForValue) {
    ensureConsumerDestinationsIsMutable();
    consumerDestinations_.add(builderForValue.build());
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the consumer project.
   * There can be multiple consumer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one consumer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
   */
  private void addConsumerDestinations(
      int index, com.google.api.Monitoring.MonitoringDestination.Builder builderForValue) {
    ensureConsumerDestinationsIsMutable();
    consumerDestinations_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the consumer project.
   * There can be multiple consumer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one consumer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
   */
  private void addAllConsumerDestinations(
      java.lang.Iterable<? extends com.google.api.Monitoring.MonitoringDestination> values) {
    ensureConsumerDestinationsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, consumerDestinations_);
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the consumer project.
   * There can be multiple consumer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one consumer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
   */
  private void clearConsumerDestinations() {
    consumerDestinations_ = emptyProtobufList();
  }
  /**
   * <pre>
   * Monitoring configurations for sending metrics to the consumer project.
   * There can be multiple consumer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one consumer destination.
   * </pre>
   *
   * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
   */
  private void removeConsumerDestinations(int index) {
    ensureConsumerDestinationsIsMutable();
    consumerDestinations_.remove(index);
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < producerDestinations_.size(); i++) {
      output.writeMessage(1, producerDestinations_.get(i));
    }
    for (int i = 0; i < consumerDestinations_.size(); i++) {
      output.writeMessage(2, consumerDestinations_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < producerDestinations_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, producerDestinations_.get(i));
    }
    for (int i = 0; i < consumerDestinations_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, consumerDestinations_.get(i));
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.google.api.Monitoring parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.Monitoring parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.Monitoring parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.Monitoring parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.Monitoring parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.Monitoring parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.api.Monitoring parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.api.Monitoring parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.api.Monitoring parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.Monitoring parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.api.Monitoring prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Monitoring configuration of the service.
   * The example below shows how to configure monitored resources and metrics
   * for monitoring. In the example, a monitored resource and two metrics are
   * defined. The `library.googleapis.com/book/returned_count` metric is sent
   * to both producer and consumer projects, whereas the
   * `library.googleapis.com/book/overdue_count` metric is only sent to the
   * consumer project.
   *     monitored_resources:
   *     - type: library.googleapis.com/branch
   *       labels:
   *       - key: /city
   *         description: The city where the library branch is located in.
   *       - key: /name
   *         description: The name of the branch.
   *     metrics:
   *     - name: library.googleapis.com/book/returned_count
   *       metric_kind: DELTA
   *       value_type: INT64
   *       labels:
   *       - key: /customer_id
   *     - name: library.googleapis.com/book/overdue_count
   *       metric_kind: GAUGE
   *       value_type: INT64
   *       labels:
   *       - key: /customer_id
   *     monitoring:
   *       producer_destinations:
   *       - monitored_resource: library.googleapis.com/branch
   *         metrics:
   *         - library.googleapis.com/book/returned_count
   *       consumer_destinations:
   *       - monitored_resource: library.googleapis.com/branch
   *         metrics:
   *         - library.googleapis.com/book/returned_count
   *         - library.googleapis.com/book/overdue_count
   * </pre>
   *
   * Protobuf type {@code google.api.Monitoring}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.api.Monitoring, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.api.Monitoring)
      com.google.api.MonitoringOrBuilder {
    // Construct using com.google.api.Monitoring.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Monitoring configurations for sending metrics to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
     */
    public java.util.List<com.google.api.Monitoring.MonitoringDestination> getProducerDestinationsList() {
      return java.util.Collections.unmodifiableList(
          instance.getProducerDestinationsList());
    }
    /**
     * <pre>
     * Monitoring configurations for sending metrics to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
     */
    public int getProducerDestinationsCount() {
      return instance.getProducerDestinationsCount();
    }/**
     * <pre>
     * Monitoring configurations for sending metrics to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
     */
    public com.google.api.Monitoring.MonitoringDestination getProducerDestinations(int index) {
      return instance.getProducerDestinations(index);
    }
    /**
     * <pre>
     * Monitoring configurations for sending metrics to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
     */
    public Builder setProducerDestinations(
        int index, com.google.api.Monitoring.MonitoringDestination value) {
      copyOnWrite();
      instance.setProducerDestinations(index, value);
      return this;
    }
    /**
     * <pre>
     * Monitoring configurations for sending metrics to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
     */
    public Builder setProducerDestinations(
        int index, com.google.api.Monitoring.MonitoringDestination.Builder builderForValue) {
      copyOnWrite();
      instance.setProducerDestinations(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Monitoring configurations for sending metrics to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
     */
    public Builder addProducerDestinations(com.google.api.Monitoring.MonitoringDestination value) {
      copyOnWrite();
      instance.addProducerDestinations(value);
      return this;
    }
    /**
     * <pre>
     * Monitoring configurations for sending metrics to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
     */
    public Builder addProducerDestinations(
        int index, com.google.api.Monitoring.MonitoringDestination value) {
      copyOnWrite();
      instance.addProducerDestinations(index, value);
      return this;
    }
    /**
     * <pre>
     * Monitoring configurations for sending metrics to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
     */
    public Builder addProducerDestinations(
        com.google.api.Monitoring.MonitoringDestination.Builder builderForValue) {
      copyOnWrite();
      instance.addProducerDestinations(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Monitoring configurations for sending metrics to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
     */
    public Builder addProducerDestinations(
        int index, com.google.api.Monitoring.MonitoringDestination.Builder builderForValue) {
      copyOnWrite();
      instance.addProducerDestinations(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Monitoring configurations for sending metrics to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
     */
    public Builder addAllProducerDestinations(
        java.lang.Iterable<? extends com.google.api.Monitoring.MonitoringDestination> values) {
      copyOnWrite();
      instance.addAllProducerDestinations(values);
      return this;
    }
    /**
     * <pre>
     * Monitoring configurations for sending metrics to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
     */
    public Builder clearProducerDestinations() {
      copyOnWrite();
      instance.clearProducerDestinations();
      return this;
    }
    /**
     * <pre>
     * Monitoring configurations for sending metrics to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination producer_destinations = 1;</code>
     */
    public Builder removeProducerDestinations(int index) {
      copyOnWrite();
      instance.removeProducerDestinations(index);
      return this;
    }

    /**
     * <pre>
     * Monitoring configurations for sending metrics to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
     */
    public java.util.List<com.google.api.Monitoring.MonitoringDestination> getConsumerDestinationsList() {
      return java.util.Collections.unmodifiableList(
          instance.getConsumerDestinationsList());
    }
    /**
     * <pre>
     * Monitoring configurations for sending metrics to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
     */
    public int getConsumerDestinationsCount() {
      return instance.getConsumerDestinationsCount();
    }/**
     * <pre>
     * Monitoring configurations for sending metrics to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
     */
    public com.google.api.Monitoring.MonitoringDestination getConsumerDestinations(int index) {
      return instance.getConsumerDestinations(index);
    }
    /**
     * <pre>
     * Monitoring configurations for sending metrics to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
     */
    public Builder setConsumerDestinations(
        int index, com.google.api.Monitoring.MonitoringDestination value) {
      copyOnWrite();
      instance.setConsumerDestinations(index, value);
      return this;
    }
    /**
     * <pre>
     * Monitoring configurations for sending metrics to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
     */
    public Builder setConsumerDestinations(
        int index, com.google.api.Monitoring.MonitoringDestination.Builder builderForValue) {
      copyOnWrite();
      instance.setConsumerDestinations(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Monitoring configurations for sending metrics to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
     */
    public Builder addConsumerDestinations(com.google.api.Monitoring.MonitoringDestination value) {
      copyOnWrite();
      instance.addConsumerDestinations(value);
      return this;
    }
    /**
     * <pre>
     * Monitoring configurations for sending metrics to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
     */
    public Builder addConsumerDestinations(
        int index, com.google.api.Monitoring.MonitoringDestination value) {
      copyOnWrite();
      instance.addConsumerDestinations(index, value);
      return this;
    }
    /**
     * <pre>
     * Monitoring configurations for sending metrics to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
     */
    public Builder addConsumerDestinations(
        com.google.api.Monitoring.MonitoringDestination.Builder builderForValue) {
      copyOnWrite();
      instance.addConsumerDestinations(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Monitoring configurations for sending metrics to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
     */
    public Builder addConsumerDestinations(
        int index, com.google.api.Monitoring.MonitoringDestination.Builder builderForValue) {
      copyOnWrite();
      instance.addConsumerDestinations(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Monitoring configurations for sending metrics to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
     */
    public Builder addAllConsumerDestinations(
        java.lang.Iterable<? extends com.google.api.Monitoring.MonitoringDestination> values) {
      copyOnWrite();
      instance.addAllConsumerDestinations(values);
      return this;
    }
    /**
     * <pre>
     * Monitoring configurations for sending metrics to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
     */
    public Builder clearConsumerDestinations() {
      copyOnWrite();
      instance.clearConsumerDestinations();
      return this;
    }
    /**
     * <pre>
     * Monitoring configurations for sending metrics to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A metric can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Monitoring.MonitoringDestination consumer_destinations = 2;</code>
     */
    public Builder removeConsumerDestinations(int index) {
      copyOnWrite();
      instance.removeConsumerDestinations(index);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.api.Monitoring)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.api.Monitoring();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        producerDestinations_.makeImmutable();
        consumerDestinations_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.google.api.Monitoring other = (com.google.api.Monitoring) arg1;
        producerDestinations_= visitor.visitList(producerDestinations_, other.producerDestinations_);
        consumerDestinations_= visitor.visitList(consumerDestinations_, other.consumerDestinations_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                if (!producerDestinations_.isModifiable()) {
                  producerDestinations_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(producerDestinations_);
                }
                producerDestinations_.add(
                    input.readMessage(com.google.api.Monitoring.MonitoringDestination.parser(), extensionRegistry));
                break;
              }
              case 18: {
                if (!consumerDestinations_.isModifiable()) {
                  consumerDestinations_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(consumerDestinations_);
                }
                consumerDestinations_.add(
                    input.readMessage(com.google.api.Monitoring.MonitoringDestination.parser(), extensionRegistry));
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.google.api.Monitoring.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.api.Monitoring)
  private static final com.google.api.Monitoring DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new Monitoring();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.google.api.Monitoring getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Monitoring> PARSER;

  public static com.google.protobuf.Parser<Monitoring> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

