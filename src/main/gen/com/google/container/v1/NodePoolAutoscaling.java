// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/container/v1/cluster_service.proto

package com.google.container.v1;

/**
 * <pre>
 * NodePoolAutoscaling contains information required by cluster autoscaler to
 * adjust the size of the node pool to the current cluster usage.
 * </pre>
 *
 * Protobuf type {@code google.container.v1.NodePoolAutoscaling}
 */
public  final class NodePoolAutoscaling extends
    com.google.protobuf.GeneratedMessageLite<
        NodePoolAutoscaling, NodePoolAutoscaling.Builder> implements
    // @@protoc_insertion_point(message_implements:google.container.v1.NodePoolAutoscaling)
    NodePoolAutoscalingOrBuilder {
  private NodePoolAutoscaling() {
  }
  public static final int ENABLED_FIELD_NUMBER = 1;
  private boolean enabled_;
  /**
   * <pre>
   * Is autoscaling enabled for this node pool.
   * </pre>
   *
   * <code>optional bool enabled = 1;</code>
   */
  public boolean getEnabled() {
    return enabled_;
  }
  /**
   * <pre>
   * Is autoscaling enabled for this node pool.
   * </pre>
   *
   * <code>optional bool enabled = 1;</code>
   */
  private void setEnabled(boolean value) {
    
    enabled_ = value;
  }
  /**
   * <pre>
   * Is autoscaling enabled for this node pool.
   * </pre>
   *
   * <code>optional bool enabled = 1;</code>
   */
  private void clearEnabled() {
    
    enabled_ = false;
  }

  public static final int MIN_NODE_COUNT_FIELD_NUMBER = 2;
  private int minNodeCount_;
  /**
   * <pre>
   * Minimum number of nodes in the NodePool. Must be &gt;= 1 and &lt;=
   * max_node_count.
   * </pre>
   *
   * <code>optional int32 min_node_count = 2;</code>
   */
  public int getMinNodeCount() {
    return minNodeCount_;
  }
  /**
   * <pre>
   * Minimum number of nodes in the NodePool. Must be &gt;= 1 and &lt;=
   * max_node_count.
   * </pre>
   *
   * <code>optional int32 min_node_count = 2;</code>
   */
  private void setMinNodeCount(int value) {
    
    minNodeCount_ = value;
  }
  /**
   * <pre>
   * Minimum number of nodes in the NodePool. Must be &gt;= 1 and &lt;=
   * max_node_count.
   * </pre>
   *
   * <code>optional int32 min_node_count = 2;</code>
   */
  private void clearMinNodeCount() {
    
    minNodeCount_ = 0;
  }

  public static final int MAX_NODE_COUNT_FIELD_NUMBER = 3;
  private int maxNodeCount_;
  /**
   * <pre>
   * Maximum number of nodes in the NodePool. Must be &gt;= min_node_count. There
   * has to enough quota to scale up the cluster.
   * </pre>
   *
   * <code>optional int32 max_node_count = 3;</code>
   */
  public int getMaxNodeCount() {
    return maxNodeCount_;
  }
  /**
   * <pre>
   * Maximum number of nodes in the NodePool. Must be &gt;= min_node_count. There
   * has to enough quota to scale up the cluster.
   * </pre>
   *
   * <code>optional int32 max_node_count = 3;</code>
   */
  private void setMaxNodeCount(int value) {
    
    maxNodeCount_ = value;
  }
  /**
   * <pre>
   * Maximum number of nodes in the NodePool. Must be &gt;= min_node_count. There
   * has to enough quota to scale up the cluster.
   * </pre>
   *
   * <code>optional int32 max_node_count = 3;</code>
   */
  private void clearMaxNodeCount() {
    
    maxNodeCount_ = 0;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (enabled_ != false) {
      output.writeBool(1, enabled_);
    }
    if (minNodeCount_ != 0) {
      output.writeInt32(2, minNodeCount_);
    }
    if (maxNodeCount_ != 0) {
      output.writeInt32(3, maxNodeCount_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (enabled_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(1, enabled_);
    }
    if (minNodeCount_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, minNodeCount_);
    }
    if (maxNodeCount_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, maxNodeCount_);
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.google.container.v1.NodePoolAutoscaling parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.container.v1.NodePoolAutoscaling parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.container.v1.NodePoolAutoscaling parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.container.v1.NodePoolAutoscaling parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.container.v1.NodePoolAutoscaling parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.container.v1.NodePoolAutoscaling parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.container.v1.NodePoolAutoscaling parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.container.v1.NodePoolAutoscaling parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.container.v1.NodePoolAutoscaling parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.container.v1.NodePoolAutoscaling parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.container.v1.NodePoolAutoscaling prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * NodePoolAutoscaling contains information required by cluster autoscaler to
   * adjust the size of the node pool to the current cluster usage.
   * </pre>
   *
   * Protobuf type {@code google.container.v1.NodePoolAutoscaling}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.container.v1.NodePoolAutoscaling, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.container.v1.NodePoolAutoscaling)
      com.google.container.v1.NodePoolAutoscalingOrBuilder {
    // Construct using com.google.container.v1.NodePoolAutoscaling.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Is autoscaling enabled for this node pool.
     * </pre>
     *
     * <code>optional bool enabled = 1;</code>
     */
    public boolean getEnabled() {
      return instance.getEnabled();
    }
    /**
     * <pre>
     * Is autoscaling enabled for this node pool.
     * </pre>
     *
     * <code>optional bool enabled = 1;</code>
     */
    public Builder setEnabled(boolean value) {
      copyOnWrite();
      instance.setEnabled(value);
      return this;
    }
    /**
     * <pre>
     * Is autoscaling enabled for this node pool.
     * </pre>
     *
     * <code>optional bool enabled = 1;</code>
     */
    public Builder clearEnabled() {
      copyOnWrite();
      instance.clearEnabled();
      return this;
    }

    /**
     * <pre>
     * Minimum number of nodes in the NodePool. Must be &gt;= 1 and &lt;=
     * max_node_count.
     * </pre>
     *
     * <code>optional int32 min_node_count = 2;</code>
     */
    public int getMinNodeCount() {
      return instance.getMinNodeCount();
    }
    /**
     * <pre>
     * Minimum number of nodes in the NodePool. Must be &gt;= 1 and &lt;=
     * max_node_count.
     * </pre>
     *
     * <code>optional int32 min_node_count = 2;</code>
     */
    public Builder setMinNodeCount(int value) {
      copyOnWrite();
      instance.setMinNodeCount(value);
      return this;
    }
    /**
     * <pre>
     * Minimum number of nodes in the NodePool. Must be &gt;= 1 and &lt;=
     * max_node_count.
     * </pre>
     *
     * <code>optional int32 min_node_count = 2;</code>
     */
    public Builder clearMinNodeCount() {
      copyOnWrite();
      instance.clearMinNodeCount();
      return this;
    }

    /**
     * <pre>
     * Maximum number of nodes in the NodePool. Must be &gt;= min_node_count. There
     * has to enough quota to scale up the cluster.
     * </pre>
     *
     * <code>optional int32 max_node_count = 3;</code>
     */
    public int getMaxNodeCount() {
      return instance.getMaxNodeCount();
    }
    /**
     * <pre>
     * Maximum number of nodes in the NodePool. Must be &gt;= min_node_count. There
     * has to enough quota to scale up the cluster.
     * </pre>
     *
     * <code>optional int32 max_node_count = 3;</code>
     */
    public Builder setMaxNodeCount(int value) {
      copyOnWrite();
      instance.setMaxNodeCount(value);
      return this;
    }
    /**
     * <pre>
     * Maximum number of nodes in the NodePool. Must be &gt;= min_node_count. There
     * has to enough quota to scale up the cluster.
     * </pre>
     *
     * <code>optional int32 max_node_count = 3;</code>
     */
    public Builder clearMaxNodeCount() {
      copyOnWrite();
      instance.clearMaxNodeCount();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.container.v1.NodePoolAutoscaling)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.container.v1.NodePoolAutoscaling();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.google.container.v1.NodePoolAutoscaling other = (com.google.container.v1.NodePoolAutoscaling) arg1;
        enabled_ = visitor.visitBoolean(enabled_ != false, enabled_,
            other.enabled_ != false, other.enabled_);
        minNodeCount_ = visitor.visitInt(minNodeCount_ != 0, minNodeCount_,
            other.minNodeCount_ != 0, other.minNodeCount_);
        maxNodeCount_ = visitor.visitInt(maxNodeCount_ != 0, maxNodeCount_,
            other.maxNodeCount_ != 0, other.maxNodeCount_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 8: {

                enabled_ = input.readBool();
                break;
              }
              case 16: {

                minNodeCount_ = input.readInt32();
                break;
              }
              case 24: {

                maxNodeCount_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.google.container.v1.NodePoolAutoscaling.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.container.v1.NodePoolAutoscaling)
  private static final com.google.container.v1.NodePoolAutoscaling DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new NodePoolAutoscaling();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.google.container.v1.NodePoolAutoscaling getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<NodePoolAutoscaling> PARSER;

  public static com.google.protobuf.Parser<NodePoolAutoscaling> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

