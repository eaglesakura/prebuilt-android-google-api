// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/service_controller.proto

package com.google.api.servicecontrol.v1;

/**
 * <pre>
 * Response message for the Report method.
 * </pre>
 *
 * Protobuf type {@code google.api.servicecontrol.v1.ReportResponse}
 */
public  final class ReportResponse extends
    com.google.protobuf.GeneratedMessageLite<
        ReportResponse, ReportResponse.Builder> implements
    // @@protoc_insertion_point(message_implements:google.api.servicecontrol.v1.ReportResponse)
    ReportResponseOrBuilder {
  private ReportResponse() {
    reportErrors_ = emptyProtobufList();
    serviceConfigId_ = "";
  }
  public interface ReportErrorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.api.servicecontrol.v1.ReportResponse.ReportError)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
     * </pre>
     *
     * <code>optional string operation_id = 1;</code>
     */
    java.lang.String getOperationId();
    /**
     * <pre>
     * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
     * </pre>
     *
     * <code>optional string operation_id = 1;</code>
     */
    com.google.protobuf.ByteString
        getOperationIdBytes();

    /**
     * <pre>
     * Details of the error when processing the `Operation`.
     * </pre>
     *
     * <code>optional .google.rpc.Status status = 2;</code>
     */
    boolean hasStatus();
    /**
     * <pre>
     * Details of the error when processing the `Operation`.
     * </pre>
     *
     * <code>optional .google.rpc.Status status = 2;</code>
     */
    com.google.rpc.Status getStatus();
  }
  /**
   * <pre>
   * Represents the processing error of one `Operation` in the request.
   * </pre>
   *
   * Protobuf type {@code google.api.servicecontrol.v1.ReportResponse.ReportError}
   */
  public  static final class ReportError extends
      com.google.protobuf.GeneratedMessageLite<
          ReportError, ReportError.Builder> implements
      // @@protoc_insertion_point(message_implements:google.api.servicecontrol.v1.ReportResponse.ReportError)
      ReportErrorOrBuilder {
    private ReportError() {
      operationId_ = "";
    }
    public static final int OPERATION_ID_FIELD_NUMBER = 1;
    private java.lang.String operationId_;
    /**
     * <pre>
     * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
     * </pre>
     *
     * <code>optional string operation_id = 1;</code>
     */
    public java.lang.String getOperationId() {
      return operationId_;
    }
    /**
     * <pre>
     * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
     * </pre>
     *
     * <code>optional string operation_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getOperationIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(operationId_);
    }
    /**
     * <pre>
     * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
     * </pre>
     *
     * <code>optional string operation_id = 1;</code>
     */
    private void setOperationId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      operationId_ = value;
    }
    /**
     * <pre>
     * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
     * </pre>
     *
     * <code>optional string operation_id = 1;</code>
     */
    private void clearOperationId() {
      
      operationId_ = getDefaultInstance().getOperationId();
    }
    /**
     * <pre>
     * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
     * </pre>
     *
     * <code>optional string operation_id = 1;</code>
     */
    private void setOperationIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      operationId_ = value.toStringUtf8();
    }

    public static final int STATUS_FIELD_NUMBER = 2;
    private com.google.rpc.Status status_;
    /**
     * <pre>
     * Details of the error when processing the `Operation`.
     * </pre>
     *
     * <code>optional .google.rpc.Status status = 2;</code>
     */
    public boolean hasStatus() {
      return status_ != null;
    }
    /**
     * <pre>
     * Details of the error when processing the `Operation`.
     * </pre>
     *
     * <code>optional .google.rpc.Status status = 2;</code>
     */
    public com.google.rpc.Status getStatus() {
      return status_ == null ? com.google.rpc.Status.getDefaultInstance() : status_;
    }
    /**
     * <pre>
     * Details of the error when processing the `Operation`.
     * </pre>
     *
     * <code>optional .google.rpc.Status status = 2;</code>
     */
    private void setStatus(com.google.rpc.Status value) {
      if (value == null) {
        throw new NullPointerException();
      }
      status_ = value;
      
      }
    /**
     * <pre>
     * Details of the error when processing the `Operation`.
     * </pre>
     *
     * <code>optional .google.rpc.Status status = 2;</code>
     */
    private void setStatus(
        com.google.rpc.Status.Builder builderForValue) {
      status_ = builderForValue.build();
      
    }
    /**
     * <pre>
     * Details of the error when processing the `Operation`.
     * </pre>
     *
     * <code>optional .google.rpc.Status status = 2;</code>
     */
    private void mergeStatus(com.google.rpc.Status value) {
      if (status_ != null &&
          status_ != com.google.rpc.Status.getDefaultInstance()) {
        status_ =
          com.google.rpc.Status.newBuilder(status_).mergeFrom(value).buildPartial();
      } else {
        status_ = value;
      }
      
    }
    /**
     * <pre>
     * Details of the error when processing the `Operation`.
     * </pre>
     *
     * <code>optional .google.rpc.Status status = 2;</code>
     */
    private void clearStatus() {  status_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!operationId_.isEmpty()) {
        output.writeString(1, getOperationId());
      }
      if (status_ != null) {
        output.writeMessage(2, getStatus());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!operationId_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getOperationId());
      }
      if (status_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getStatus());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.api.servicecontrol.v1.ReportResponse.ReportError prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Represents the processing error of one `Operation` in the request.
     * </pre>
     *
     * Protobuf type {@code google.api.servicecontrol.v1.ReportResponse.ReportError}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.api.servicecontrol.v1.ReportResponse.ReportError, Builder> implements
        // @@protoc_insertion_point(builder_implements:google.api.servicecontrol.v1.ReportResponse.ReportError)
        com.google.api.servicecontrol.v1.ReportResponse.ReportErrorOrBuilder {
      // Construct using com.google.api.servicecontrol.v1.ReportResponse.ReportError.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
       * </pre>
       *
       * <code>optional string operation_id = 1;</code>
       */
      public java.lang.String getOperationId() {
        return instance.getOperationId();
      }
      /**
       * <pre>
       * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
       * </pre>
       *
       * <code>optional string operation_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getOperationIdBytes() {
        return instance.getOperationIdBytes();
      }
      /**
       * <pre>
       * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
       * </pre>
       *
       * <code>optional string operation_id = 1;</code>
       */
      public Builder setOperationId(
          java.lang.String value) {
        copyOnWrite();
        instance.setOperationId(value);
        return this;
      }
      /**
       * <pre>
       * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
       * </pre>
       *
       * <code>optional string operation_id = 1;</code>
       */
      public Builder clearOperationId() {
        copyOnWrite();
        instance.clearOperationId();
        return this;
      }
      /**
       * <pre>
       * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
       * </pre>
       *
       * <code>optional string operation_id = 1;</code>
       */
      public Builder setOperationIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setOperationIdBytes(value);
        return this;
      }

      /**
       * <pre>
       * Details of the error when processing the `Operation`.
       * </pre>
       *
       * <code>optional .google.rpc.Status status = 2;</code>
       */
      public boolean hasStatus() {
        return instance.hasStatus();
      }
      /**
       * <pre>
       * Details of the error when processing the `Operation`.
       * </pre>
       *
       * <code>optional .google.rpc.Status status = 2;</code>
       */
      public com.google.rpc.Status getStatus() {
        return instance.getStatus();
      }
      /**
       * <pre>
       * Details of the error when processing the `Operation`.
       * </pre>
       *
       * <code>optional .google.rpc.Status status = 2;</code>
       */
      public Builder setStatus(com.google.rpc.Status value) {
        copyOnWrite();
        instance.setStatus(value);
        return this;
        }
      /**
       * <pre>
       * Details of the error when processing the `Operation`.
       * </pre>
       *
       * <code>optional .google.rpc.Status status = 2;</code>
       */
      public Builder setStatus(
          com.google.rpc.Status.Builder builderForValue) {
        copyOnWrite();
        instance.setStatus(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Details of the error when processing the `Operation`.
       * </pre>
       *
       * <code>optional .google.rpc.Status status = 2;</code>
       */
      public Builder mergeStatus(com.google.rpc.Status value) {
        copyOnWrite();
        instance.mergeStatus(value);
        return this;
      }
      /**
       * <pre>
       * Details of the error when processing the `Operation`.
       * </pre>
       *
       * <code>optional .google.rpc.Status status = 2;</code>
       */
      public Builder clearStatus() {  copyOnWrite();
        instance.clearStatus();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:google.api.servicecontrol.v1.ReportResponse.ReportError)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.api.servicecontrol.v1.ReportResponse.ReportError();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.api.servicecontrol.v1.ReportResponse.ReportError other = (com.google.api.servicecontrol.v1.ReportResponse.ReportError) arg1;
          operationId_ = visitor.visitString(!operationId_.isEmpty(), operationId_,
              !other.operationId_.isEmpty(), other.operationId_);
          status_ = visitor.visitMessage(status_, other.status_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  operationId_ = s;
                  break;
                }
                case 18: {
                  com.google.rpc.Status.Builder subBuilder = null;
                  if (status_ != null) {
                    subBuilder = status_.toBuilder();
                  }
                  status_ = input.readMessage(com.google.rpc.Status.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(status_);
                    status_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.api.servicecontrol.v1.ReportResponse.ReportError.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.ReportResponse.ReportError)
    private static final com.google.api.servicecontrol.v1.ReportResponse.ReportError DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ReportError();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ReportError> PARSER;

    public static com.google.protobuf.Parser<ReportError> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int bitField0_;
  public static final int REPORT_ERRORS_FIELD_NUMBER = 1;
  private com.google.protobuf.Internal.ProtobufList<com.google.api.servicecontrol.v1.ReportResponse.ReportError> reportErrors_;
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a complete failure where none of the
   *    `Operations` in the request succeeded.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  public java.util.List<com.google.api.servicecontrol.v1.ReportResponse.ReportError> getReportErrorsList() {
    return reportErrors_;
  }
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a complete failure where none of the
   *    `Operations` in the request succeeded.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  public java.util.List<? extends com.google.api.servicecontrol.v1.ReportResponse.ReportErrorOrBuilder> 
      getReportErrorsOrBuilderList() {
    return reportErrors_;
  }
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a complete failure where none of the
   *    `Operations` in the request succeeded.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  public int getReportErrorsCount() {
    return reportErrors_.size();
  }
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a complete failure where none of the
   *    `Operations` in the request succeeded.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  public com.google.api.servicecontrol.v1.ReportResponse.ReportError getReportErrors(int index) {
    return reportErrors_.get(index);
  }
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a complete failure where none of the
   *    `Operations` in the request succeeded.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  public com.google.api.servicecontrol.v1.ReportResponse.ReportErrorOrBuilder getReportErrorsOrBuilder(
      int index) {
    return reportErrors_.get(index);
  }
  private void ensureReportErrorsIsMutable() {
    if (!reportErrors_.isModifiable()) {
      reportErrors_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(reportErrors_);
     }
  }

  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a complete failure where none of the
   *    `Operations` in the request succeeded.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  private void setReportErrors(
      int index, com.google.api.servicecontrol.v1.ReportResponse.ReportError value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureReportErrorsIsMutable();
    reportErrors_.set(index, value);
  }
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a complete failure where none of the
   *    `Operations` in the request succeeded.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  private void setReportErrors(
      int index, com.google.api.servicecontrol.v1.ReportResponse.ReportError.Builder builderForValue) {
    ensureReportErrorsIsMutable();
    reportErrors_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a complete failure where none of the
   *    `Operations` in the request succeeded.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  private void addReportErrors(com.google.api.servicecontrol.v1.ReportResponse.ReportError value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureReportErrorsIsMutable();
    reportErrors_.add(value);
  }
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a complete failure where none of the
   *    `Operations` in the request succeeded.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  private void addReportErrors(
      int index, com.google.api.servicecontrol.v1.ReportResponse.ReportError value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureReportErrorsIsMutable();
    reportErrors_.add(index, value);
  }
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a complete failure where none of the
   *    `Operations` in the request succeeded.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  private void addReportErrors(
      com.google.api.servicecontrol.v1.ReportResponse.ReportError.Builder builderForValue) {
    ensureReportErrorsIsMutable();
    reportErrors_.add(builderForValue.build());
  }
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a complete failure where none of the
   *    `Operations` in the request succeeded.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  private void addReportErrors(
      int index, com.google.api.servicecontrol.v1.ReportResponse.ReportError.Builder builderForValue) {
    ensureReportErrorsIsMutable();
    reportErrors_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a complete failure where none of the
   *    `Operations` in the request succeeded.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  private void addAllReportErrors(
      java.lang.Iterable<? extends com.google.api.servicecontrol.v1.ReportResponse.ReportError> values) {
    ensureReportErrorsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, reportErrors_);
  }
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a complete failure where none of the
   *    `Operations` in the request succeeded.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  private void clearReportErrors() {
    reportErrors_ = emptyProtobufList();
  }
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a complete failure where none of the
   *    `Operations` in the request succeeded.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  private void removeReportErrors(int index) {
    ensureReportErrorsIsMutable();
    reportErrors_.remove(index);
  }

  public static final int SERVICE_CONFIG_ID_FIELD_NUMBER = 2;
  private java.lang.String serviceConfigId_;
  /**
   * <pre>
   * The actual config id used to process the request.
   * </pre>
   *
   * <code>optional string service_config_id = 2;</code>
   */
  public java.lang.String getServiceConfigId() {
    return serviceConfigId_;
  }
  /**
   * <pre>
   * The actual config id used to process the request.
   * </pre>
   *
   * <code>optional string service_config_id = 2;</code>
   */
  public com.google.protobuf.ByteString
      getServiceConfigIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(serviceConfigId_);
  }
  /**
   * <pre>
   * The actual config id used to process the request.
   * </pre>
   *
   * <code>optional string service_config_id = 2;</code>
   */
  private void setServiceConfigId(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    serviceConfigId_ = value;
  }
  /**
   * <pre>
   * The actual config id used to process the request.
   * </pre>
   *
   * <code>optional string service_config_id = 2;</code>
   */
  private void clearServiceConfigId() {
    
    serviceConfigId_ = getDefaultInstance().getServiceConfigId();
  }
  /**
   * <pre>
   * The actual config id used to process the request.
   * </pre>
   *
   * <code>optional string service_config_id = 2;</code>
   */
  private void setServiceConfigIdBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    serviceConfigId_ = value.toStringUtf8();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < reportErrors_.size(); i++) {
      output.writeMessage(1, reportErrors_.get(i));
    }
    if (!serviceConfigId_.isEmpty()) {
      output.writeString(2, getServiceConfigId());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < reportErrors_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, reportErrors_.get(i));
    }
    if (!serviceConfigId_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getServiceConfigId());
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.google.api.servicecontrol.v1.ReportResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.servicecontrol.v1.ReportResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.servicecontrol.v1.ReportResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.servicecontrol.v1.ReportResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.servicecontrol.v1.ReportResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.servicecontrol.v1.ReportResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.api.servicecontrol.v1.ReportResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.api.servicecontrol.v1.ReportResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.api.servicecontrol.v1.ReportResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.servicecontrol.v1.ReportResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.api.servicecontrol.v1.ReportResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Response message for the Report method.
   * </pre>
   *
   * Protobuf type {@code google.api.servicecontrol.v1.ReportResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.api.servicecontrol.v1.ReportResponse, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.api.servicecontrol.v1.ReportResponse)
      com.google.api.servicecontrol.v1.ReportResponseOrBuilder {
    // Construct using com.google.api.servicecontrol.v1.ReportResponse.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public java.util.List<com.google.api.servicecontrol.v1.ReportResponse.ReportError> getReportErrorsList() {
      return java.util.Collections.unmodifiableList(
          instance.getReportErrorsList());
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public int getReportErrorsCount() {
      return instance.getReportErrorsCount();
    }/**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public com.google.api.servicecontrol.v1.ReportResponse.ReportError getReportErrors(int index) {
      return instance.getReportErrors(index);
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public Builder setReportErrors(
        int index, com.google.api.servicecontrol.v1.ReportResponse.ReportError value) {
      copyOnWrite();
      instance.setReportErrors(index, value);
      return this;
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public Builder setReportErrors(
        int index, com.google.api.servicecontrol.v1.ReportResponse.ReportError.Builder builderForValue) {
      copyOnWrite();
      instance.setReportErrors(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public Builder addReportErrors(com.google.api.servicecontrol.v1.ReportResponse.ReportError value) {
      copyOnWrite();
      instance.addReportErrors(value);
      return this;
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public Builder addReportErrors(
        int index, com.google.api.servicecontrol.v1.ReportResponse.ReportError value) {
      copyOnWrite();
      instance.addReportErrors(index, value);
      return this;
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public Builder addReportErrors(
        com.google.api.servicecontrol.v1.ReportResponse.ReportError.Builder builderForValue) {
      copyOnWrite();
      instance.addReportErrors(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public Builder addReportErrors(
        int index, com.google.api.servicecontrol.v1.ReportResponse.ReportError.Builder builderForValue) {
      copyOnWrite();
      instance.addReportErrors(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public Builder addAllReportErrors(
        java.lang.Iterable<? extends com.google.api.servicecontrol.v1.ReportResponse.ReportError> values) {
      copyOnWrite();
      instance.addAllReportErrors(values);
      return this;
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public Builder clearReportErrors() {
      copyOnWrite();
      instance.clearReportErrors();
      return this;
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public Builder removeReportErrors(int index) {
      copyOnWrite();
      instance.removeReportErrors(index);
      return this;
    }

    /**
     * <pre>
     * The actual config id used to process the request.
     * </pre>
     *
     * <code>optional string service_config_id = 2;</code>
     */
    public java.lang.String getServiceConfigId() {
      return instance.getServiceConfigId();
    }
    /**
     * <pre>
     * The actual config id used to process the request.
     * </pre>
     *
     * <code>optional string service_config_id = 2;</code>
     */
    public com.google.protobuf.ByteString
        getServiceConfigIdBytes() {
      return instance.getServiceConfigIdBytes();
    }
    /**
     * <pre>
     * The actual config id used to process the request.
     * </pre>
     *
     * <code>optional string service_config_id = 2;</code>
     */
    public Builder setServiceConfigId(
        java.lang.String value) {
      copyOnWrite();
      instance.setServiceConfigId(value);
      return this;
    }
    /**
     * <pre>
     * The actual config id used to process the request.
     * </pre>
     *
     * <code>optional string service_config_id = 2;</code>
     */
    public Builder clearServiceConfigId() {
      copyOnWrite();
      instance.clearServiceConfigId();
      return this;
    }
    /**
     * <pre>
     * The actual config id used to process the request.
     * </pre>
     *
     * <code>optional string service_config_id = 2;</code>
     */
    public Builder setServiceConfigIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setServiceConfigIdBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.api.servicecontrol.v1.ReportResponse)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.api.servicecontrol.v1.ReportResponse();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        reportErrors_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.google.api.servicecontrol.v1.ReportResponse other = (com.google.api.servicecontrol.v1.ReportResponse) arg1;
        reportErrors_= visitor.visitList(reportErrors_, other.reportErrors_);
        serviceConfigId_ = visitor.visitString(!serviceConfigId_.isEmpty(), serviceConfigId_,
            !other.serviceConfigId_.isEmpty(), other.serviceConfigId_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                if (!reportErrors_.isModifiable()) {
                  reportErrors_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(reportErrors_);
                }
                reportErrors_.add(
                    input.readMessage(com.google.api.servicecontrol.v1.ReportResponse.ReportError.parser(), extensionRegistry));
                break;
              }
              case 18: {
                String s = input.readStringRequireUtf8();

                serviceConfigId_ = s;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.google.api.servicecontrol.v1.ReportResponse.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.ReportResponse)
  private static final com.google.api.servicecontrol.v1.ReportResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ReportResponse();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.google.api.servicecontrol.v1.ReportResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ReportResponse> PARSER;

  public static com.google.protobuf.Parser<ReportResponse> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

