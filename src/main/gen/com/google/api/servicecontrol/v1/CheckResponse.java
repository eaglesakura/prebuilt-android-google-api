// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/service_controller.proto

package com.google.api.servicecontrol.v1;

/**
 * <pre>
 * Response message for the Check method.
 * </pre>
 *
 * Protobuf type {@code google.api.servicecontrol.v1.CheckResponse}
 */
public  final class CheckResponse extends
    com.google.protobuf.GeneratedMessageLite<
        CheckResponse, CheckResponse.Builder> implements
    // @@protoc_insertion_point(message_implements:google.api.servicecontrol.v1.CheckResponse)
    CheckResponseOrBuilder {
  private CheckResponse() {
    operationId_ = "";
    checkErrors_ = emptyProtobufList();
    serviceConfigId_ = "";
  }
  private int bitField0_;
  public static final int OPERATION_ID_FIELD_NUMBER = 1;
  private java.lang.String operationId_;
  /**
   * <pre>
   * The same operation_id value used in the CheckRequest.
   * Used for logging and diagnostics purposes.
   * </pre>
   *
   * <code>optional string operation_id = 1;</code>
   */
  public java.lang.String getOperationId() {
    return operationId_;
  }
  /**
   * <pre>
   * The same operation_id value used in the CheckRequest.
   * Used for logging and diagnostics purposes.
   * </pre>
   *
   * <code>optional string operation_id = 1;</code>
   */
  public com.google.protobuf.ByteString
      getOperationIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(operationId_);
  }
  /**
   * <pre>
   * The same operation_id value used in the CheckRequest.
   * Used for logging and diagnostics purposes.
   * </pre>
   *
   * <code>optional string operation_id = 1;</code>
   */
  private void setOperationId(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    operationId_ = value;
  }
  /**
   * <pre>
   * The same operation_id value used in the CheckRequest.
   * Used for logging and diagnostics purposes.
   * </pre>
   *
   * <code>optional string operation_id = 1;</code>
   */
  private void clearOperationId() {
    
    operationId_ = getDefaultInstance().getOperationId();
  }
  /**
   * <pre>
   * The same operation_id value used in the CheckRequest.
   * Used for logging and diagnostics purposes.
   * </pre>
   *
   * <code>optional string operation_id = 1;</code>
   */
  private void setOperationIdBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    operationId_ = value.toStringUtf8();
  }

  public static final int CHECK_ERRORS_FIELD_NUMBER = 2;
  private com.google.protobuf.Internal.ProtobufList<com.google.api.servicecontrol.v1.CheckError> checkErrors_;
  /**
   * <pre>
   * Indicate the decision of the check.
   * If no check errors are present, the service should process the operation.
   * Otherwise the service should use the list of errors to determine the
   * appropriate action.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
   */
  public java.util.List<com.google.api.servicecontrol.v1.CheckError> getCheckErrorsList() {
    return checkErrors_;
  }
  /**
   * <pre>
   * Indicate the decision of the check.
   * If no check errors are present, the service should process the operation.
   * Otherwise the service should use the list of errors to determine the
   * appropriate action.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
   */
  public java.util.List<? extends com.google.api.servicecontrol.v1.CheckErrorOrBuilder> 
      getCheckErrorsOrBuilderList() {
    return checkErrors_;
  }
  /**
   * <pre>
   * Indicate the decision of the check.
   * If no check errors are present, the service should process the operation.
   * Otherwise the service should use the list of errors to determine the
   * appropriate action.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
   */
  public int getCheckErrorsCount() {
    return checkErrors_.size();
  }
  /**
   * <pre>
   * Indicate the decision of the check.
   * If no check errors are present, the service should process the operation.
   * Otherwise the service should use the list of errors to determine the
   * appropriate action.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
   */
  public com.google.api.servicecontrol.v1.CheckError getCheckErrors(int index) {
    return checkErrors_.get(index);
  }
  /**
   * <pre>
   * Indicate the decision of the check.
   * If no check errors are present, the service should process the operation.
   * Otherwise the service should use the list of errors to determine the
   * appropriate action.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
   */
  public com.google.api.servicecontrol.v1.CheckErrorOrBuilder getCheckErrorsOrBuilder(
      int index) {
    return checkErrors_.get(index);
  }
  private void ensureCheckErrorsIsMutable() {
    if (!checkErrors_.isModifiable()) {
      checkErrors_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(checkErrors_);
     }
  }

  /**
   * <pre>
   * Indicate the decision of the check.
   * If no check errors are present, the service should process the operation.
   * Otherwise the service should use the list of errors to determine the
   * appropriate action.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
   */
  private void setCheckErrors(
      int index, com.google.api.servicecontrol.v1.CheckError value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureCheckErrorsIsMutable();
    checkErrors_.set(index, value);
  }
  /**
   * <pre>
   * Indicate the decision of the check.
   * If no check errors are present, the service should process the operation.
   * Otherwise the service should use the list of errors to determine the
   * appropriate action.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
   */
  private void setCheckErrors(
      int index, com.google.api.servicecontrol.v1.CheckError.Builder builderForValue) {
    ensureCheckErrorsIsMutable();
    checkErrors_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * Indicate the decision of the check.
   * If no check errors are present, the service should process the operation.
   * Otherwise the service should use the list of errors to determine the
   * appropriate action.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
   */
  private void addCheckErrors(com.google.api.servicecontrol.v1.CheckError value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureCheckErrorsIsMutable();
    checkErrors_.add(value);
  }
  /**
   * <pre>
   * Indicate the decision of the check.
   * If no check errors are present, the service should process the operation.
   * Otherwise the service should use the list of errors to determine the
   * appropriate action.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
   */
  private void addCheckErrors(
      int index, com.google.api.servicecontrol.v1.CheckError value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureCheckErrorsIsMutable();
    checkErrors_.add(index, value);
  }
  /**
   * <pre>
   * Indicate the decision of the check.
   * If no check errors are present, the service should process the operation.
   * Otherwise the service should use the list of errors to determine the
   * appropriate action.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
   */
  private void addCheckErrors(
      com.google.api.servicecontrol.v1.CheckError.Builder builderForValue) {
    ensureCheckErrorsIsMutable();
    checkErrors_.add(builderForValue.build());
  }
  /**
   * <pre>
   * Indicate the decision of the check.
   * If no check errors are present, the service should process the operation.
   * Otherwise the service should use the list of errors to determine the
   * appropriate action.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
   */
  private void addCheckErrors(
      int index, com.google.api.servicecontrol.v1.CheckError.Builder builderForValue) {
    ensureCheckErrorsIsMutable();
    checkErrors_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * Indicate the decision of the check.
   * If no check errors are present, the service should process the operation.
   * Otherwise the service should use the list of errors to determine the
   * appropriate action.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
   */
  private void addAllCheckErrors(
      java.lang.Iterable<? extends com.google.api.servicecontrol.v1.CheckError> values) {
    ensureCheckErrorsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, checkErrors_);
  }
  /**
   * <pre>
   * Indicate the decision of the check.
   * If no check errors are present, the service should process the operation.
   * Otherwise the service should use the list of errors to determine the
   * appropriate action.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
   */
  private void clearCheckErrors() {
    checkErrors_ = emptyProtobufList();
  }
  /**
   * <pre>
   * Indicate the decision of the check.
   * If no check errors are present, the service should process the operation.
   * Otherwise the service should use the list of errors to determine the
   * appropriate action.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
   */
  private void removeCheckErrors(int index) {
    ensureCheckErrorsIsMutable();
    checkErrors_.remove(index);
  }

  public static final int SERVICE_CONFIG_ID_FIELD_NUMBER = 5;
  private java.lang.String serviceConfigId_;
  /**
   * <pre>
   * The actual config id used to process the request.
   * </pre>
   *
   * <code>optional string service_config_id = 5;</code>
   */
  public java.lang.String getServiceConfigId() {
    return serviceConfigId_;
  }
  /**
   * <pre>
   * The actual config id used to process the request.
   * </pre>
   *
   * <code>optional string service_config_id = 5;</code>
   */
  public com.google.protobuf.ByteString
      getServiceConfigIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(serviceConfigId_);
  }
  /**
   * <pre>
   * The actual config id used to process the request.
   * </pre>
   *
   * <code>optional string service_config_id = 5;</code>
   */
  private void setServiceConfigId(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    serviceConfigId_ = value;
  }
  /**
   * <pre>
   * The actual config id used to process the request.
   * </pre>
   *
   * <code>optional string service_config_id = 5;</code>
   */
  private void clearServiceConfigId() {
    
    serviceConfigId_ = getDefaultInstance().getServiceConfigId();
  }
  /**
   * <pre>
   * The actual config id used to process the request.
   * </pre>
   *
   * <code>optional string service_config_id = 5;</code>
   */
  private void setServiceConfigIdBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    serviceConfigId_ = value.toStringUtf8();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!operationId_.isEmpty()) {
      output.writeString(1, getOperationId());
    }
    for (int i = 0; i < checkErrors_.size(); i++) {
      output.writeMessage(2, checkErrors_.get(i));
    }
    if (!serviceConfigId_.isEmpty()) {
      output.writeString(5, getServiceConfigId());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (!operationId_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getOperationId());
    }
    for (int i = 0; i < checkErrors_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, checkErrors_.get(i));
    }
    if (!serviceConfigId_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(5, getServiceConfigId());
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.google.api.servicecontrol.v1.CheckResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.servicecontrol.v1.CheckResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.servicecontrol.v1.CheckResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.servicecontrol.v1.CheckResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.servicecontrol.v1.CheckResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.servicecontrol.v1.CheckResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.api.servicecontrol.v1.CheckResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.api.servicecontrol.v1.CheckResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.api.servicecontrol.v1.CheckResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.servicecontrol.v1.CheckResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.api.servicecontrol.v1.CheckResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Response message for the Check method.
   * </pre>
   *
   * Protobuf type {@code google.api.servicecontrol.v1.CheckResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.api.servicecontrol.v1.CheckResponse, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.api.servicecontrol.v1.CheckResponse)
      com.google.api.servicecontrol.v1.CheckResponseOrBuilder {
    // Construct using com.google.api.servicecontrol.v1.CheckResponse.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The same operation_id value used in the CheckRequest.
     * Used for logging and diagnostics purposes.
     * </pre>
     *
     * <code>optional string operation_id = 1;</code>
     */
    public java.lang.String getOperationId() {
      return instance.getOperationId();
    }
    /**
     * <pre>
     * The same operation_id value used in the CheckRequest.
     * Used for logging and diagnostics purposes.
     * </pre>
     *
     * <code>optional string operation_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getOperationIdBytes() {
      return instance.getOperationIdBytes();
    }
    /**
     * <pre>
     * The same operation_id value used in the CheckRequest.
     * Used for logging and diagnostics purposes.
     * </pre>
     *
     * <code>optional string operation_id = 1;</code>
     */
    public Builder setOperationId(
        java.lang.String value) {
      copyOnWrite();
      instance.setOperationId(value);
      return this;
    }
    /**
     * <pre>
     * The same operation_id value used in the CheckRequest.
     * Used for logging and diagnostics purposes.
     * </pre>
     *
     * <code>optional string operation_id = 1;</code>
     */
    public Builder clearOperationId() {
      copyOnWrite();
      instance.clearOperationId();
      return this;
    }
    /**
     * <pre>
     * The same operation_id value used in the CheckRequest.
     * Used for logging and diagnostics purposes.
     * </pre>
     *
     * <code>optional string operation_id = 1;</code>
     */
    public Builder setOperationIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setOperationIdBytes(value);
      return this;
    }

    /**
     * <pre>
     * Indicate the decision of the check.
     * If no check errors are present, the service should process the operation.
     * Otherwise the service should use the list of errors to determine the
     * appropriate action.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
     */
    public java.util.List<com.google.api.servicecontrol.v1.CheckError> getCheckErrorsList() {
      return java.util.Collections.unmodifiableList(
          instance.getCheckErrorsList());
    }
    /**
     * <pre>
     * Indicate the decision of the check.
     * If no check errors are present, the service should process the operation.
     * Otherwise the service should use the list of errors to determine the
     * appropriate action.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
     */
    public int getCheckErrorsCount() {
      return instance.getCheckErrorsCount();
    }/**
     * <pre>
     * Indicate the decision of the check.
     * If no check errors are present, the service should process the operation.
     * Otherwise the service should use the list of errors to determine the
     * appropriate action.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
     */
    public com.google.api.servicecontrol.v1.CheckError getCheckErrors(int index) {
      return instance.getCheckErrors(index);
    }
    /**
     * <pre>
     * Indicate the decision of the check.
     * If no check errors are present, the service should process the operation.
     * Otherwise the service should use the list of errors to determine the
     * appropriate action.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
     */
    public Builder setCheckErrors(
        int index, com.google.api.servicecontrol.v1.CheckError value) {
      copyOnWrite();
      instance.setCheckErrors(index, value);
      return this;
    }
    /**
     * <pre>
     * Indicate the decision of the check.
     * If no check errors are present, the service should process the operation.
     * Otherwise the service should use the list of errors to determine the
     * appropriate action.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
     */
    public Builder setCheckErrors(
        int index, com.google.api.servicecontrol.v1.CheckError.Builder builderForValue) {
      copyOnWrite();
      instance.setCheckErrors(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Indicate the decision of the check.
     * If no check errors are present, the service should process the operation.
     * Otherwise the service should use the list of errors to determine the
     * appropriate action.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
     */
    public Builder addCheckErrors(com.google.api.servicecontrol.v1.CheckError value) {
      copyOnWrite();
      instance.addCheckErrors(value);
      return this;
    }
    /**
     * <pre>
     * Indicate the decision of the check.
     * If no check errors are present, the service should process the operation.
     * Otherwise the service should use the list of errors to determine the
     * appropriate action.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
     */
    public Builder addCheckErrors(
        int index, com.google.api.servicecontrol.v1.CheckError value) {
      copyOnWrite();
      instance.addCheckErrors(index, value);
      return this;
    }
    /**
     * <pre>
     * Indicate the decision of the check.
     * If no check errors are present, the service should process the operation.
     * Otherwise the service should use the list of errors to determine the
     * appropriate action.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
     */
    public Builder addCheckErrors(
        com.google.api.servicecontrol.v1.CheckError.Builder builderForValue) {
      copyOnWrite();
      instance.addCheckErrors(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Indicate the decision of the check.
     * If no check errors are present, the service should process the operation.
     * Otherwise the service should use the list of errors to determine the
     * appropriate action.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
     */
    public Builder addCheckErrors(
        int index, com.google.api.servicecontrol.v1.CheckError.Builder builderForValue) {
      copyOnWrite();
      instance.addCheckErrors(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Indicate the decision of the check.
     * If no check errors are present, the service should process the operation.
     * Otherwise the service should use the list of errors to determine the
     * appropriate action.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
     */
    public Builder addAllCheckErrors(
        java.lang.Iterable<? extends com.google.api.servicecontrol.v1.CheckError> values) {
      copyOnWrite();
      instance.addAllCheckErrors(values);
      return this;
    }
    /**
     * <pre>
     * Indicate the decision of the check.
     * If no check errors are present, the service should process the operation.
     * Otherwise the service should use the list of errors to determine the
     * appropriate action.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
     */
    public Builder clearCheckErrors() {
      copyOnWrite();
      instance.clearCheckErrors();
      return this;
    }
    /**
     * <pre>
     * Indicate the decision of the check.
     * If no check errors are present, the service should process the operation.
     * Otherwise the service should use the list of errors to determine the
     * appropriate action.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;</code>
     */
    public Builder removeCheckErrors(int index) {
      copyOnWrite();
      instance.removeCheckErrors(index);
      return this;
    }

    /**
     * <pre>
     * The actual config id used to process the request.
     * </pre>
     *
     * <code>optional string service_config_id = 5;</code>
     */
    public java.lang.String getServiceConfigId() {
      return instance.getServiceConfigId();
    }
    /**
     * <pre>
     * The actual config id used to process the request.
     * </pre>
     *
     * <code>optional string service_config_id = 5;</code>
     */
    public com.google.protobuf.ByteString
        getServiceConfigIdBytes() {
      return instance.getServiceConfigIdBytes();
    }
    /**
     * <pre>
     * The actual config id used to process the request.
     * </pre>
     *
     * <code>optional string service_config_id = 5;</code>
     */
    public Builder setServiceConfigId(
        java.lang.String value) {
      copyOnWrite();
      instance.setServiceConfigId(value);
      return this;
    }
    /**
     * <pre>
     * The actual config id used to process the request.
     * </pre>
     *
     * <code>optional string service_config_id = 5;</code>
     */
    public Builder clearServiceConfigId() {
      copyOnWrite();
      instance.clearServiceConfigId();
      return this;
    }
    /**
     * <pre>
     * The actual config id used to process the request.
     * </pre>
     *
     * <code>optional string service_config_id = 5;</code>
     */
    public Builder setServiceConfigIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setServiceConfigIdBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.api.servicecontrol.v1.CheckResponse)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.api.servicecontrol.v1.CheckResponse();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        checkErrors_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.google.api.servicecontrol.v1.CheckResponse other = (com.google.api.servicecontrol.v1.CheckResponse) arg1;
        operationId_ = visitor.visitString(!operationId_.isEmpty(), operationId_,
            !other.operationId_.isEmpty(), other.operationId_);
        checkErrors_= visitor.visitList(checkErrors_, other.checkErrors_);
        serviceConfigId_ = visitor.visitString(!serviceConfigId_.isEmpty(), serviceConfigId_,
            !other.serviceConfigId_.isEmpty(), other.serviceConfigId_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readStringRequireUtf8();

                operationId_ = s;
                break;
              }
              case 18: {
                if (!checkErrors_.isModifiable()) {
                  checkErrors_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(checkErrors_);
                }
                checkErrors_.add(
                    input.readMessage(com.google.api.servicecontrol.v1.CheckError.parser(), extensionRegistry));
                break;
              }
              case 42: {
                String s = input.readStringRequireUtf8();

                serviceConfigId_ = s;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.google.api.servicecontrol.v1.CheckResponse.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.CheckResponse)
  private static final com.google.api.servicecontrol.v1.CheckResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new CheckResponse();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.google.api.servicecontrol.v1.CheckResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<CheckResponse> PARSER;

  public static com.google.protobuf.Parser<CheckResponse> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

