// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/system_parameter.proto

package com.google.api;

/**
 * <pre>
 * Define a system parameter rule mapping system parameter definitions to
 * methods.
 * </pre>
 *
 * Protobuf type {@code google.api.SystemParameterRule}
 */
public  final class SystemParameterRule extends
    com.google.protobuf.GeneratedMessageLite<
        SystemParameterRule, SystemParameterRule.Builder> implements
    // @@protoc_insertion_point(message_implements:google.api.SystemParameterRule)
    SystemParameterRuleOrBuilder {
  private SystemParameterRule() {
    selector_ = "";
    parameters_ = emptyProtobufList();
  }
  private int bitField0_;
  public static final int SELECTOR_FIELD_NUMBER = 1;
  private java.lang.String selector_;
  /**
   * <pre>
   * Selects the methods to which this rule applies. Use '*' to indicate all
   * methods in all APIs.
   * Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
   * </pre>
   *
   * <code>optional string selector = 1;</code>
   */
  public java.lang.String getSelector() {
    return selector_;
  }
  /**
   * <pre>
   * Selects the methods to which this rule applies. Use '*' to indicate all
   * methods in all APIs.
   * Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
   * </pre>
   *
   * <code>optional string selector = 1;</code>
   */
  public com.google.protobuf.ByteString
      getSelectorBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(selector_);
  }
  /**
   * <pre>
   * Selects the methods to which this rule applies. Use '*' to indicate all
   * methods in all APIs.
   * Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
   * </pre>
   *
   * <code>optional string selector = 1;</code>
   */
  private void setSelector(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    selector_ = value;
  }
  /**
   * <pre>
   * Selects the methods to which this rule applies. Use '*' to indicate all
   * methods in all APIs.
   * Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
   * </pre>
   *
   * <code>optional string selector = 1;</code>
   */
  private void clearSelector() {
    
    selector_ = getDefaultInstance().getSelector();
  }
  /**
   * <pre>
   * Selects the methods to which this rule applies. Use '*' to indicate all
   * methods in all APIs.
   * Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
   * </pre>
   *
   * <code>optional string selector = 1;</code>
   */
  private void setSelectorBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    selector_ = value.toStringUtf8();
  }

  public static final int PARAMETERS_FIELD_NUMBER = 2;
  private com.google.protobuf.Internal.ProtobufList<com.google.api.SystemParameter> parameters_;
  /**
   * <pre>
   * Define parameters. Multiple names may be defined for a parameter.
   * For a given method call, only one of them should be used. If multiple
   * names are used the behavior is implementation-dependent.
   * If none of the specified names are present the behavior is
   * parameter-dependent.
   * </pre>
   *
   * <code>repeated .google.api.SystemParameter parameters = 2;</code>
   */
  public java.util.List<com.google.api.SystemParameter> getParametersList() {
    return parameters_;
  }
  /**
   * <pre>
   * Define parameters. Multiple names may be defined for a parameter.
   * For a given method call, only one of them should be used. If multiple
   * names are used the behavior is implementation-dependent.
   * If none of the specified names are present the behavior is
   * parameter-dependent.
   * </pre>
   *
   * <code>repeated .google.api.SystemParameter parameters = 2;</code>
   */
  public java.util.List<? extends com.google.api.SystemParameterOrBuilder> 
      getParametersOrBuilderList() {
    return parameters_;
  }
  /**
   * <pre>
   * Define parameters. Multiple names may be defined for a parameter.
   * For a given method call, only one of them should be used. If multiple
   * names are used the behavior is implementation-dependent.
   * If none of the specified names are present the behavior is
   * parameter-dependent.
   * </pre>
   *
   * <code>repeated .google.api.SystemParameter parameters = 2;</code>
   */
  public int getParametersCount() {
    return parameters_.size();
  }
  /**
   * <pre>
   * Define parameters. Multiple names may be defined for a parameter.
   * For a given method call, only one of them should be used. If multiple
   * names are used the behavior is implementation-dependent.
   * If none of the specified names are present the behavior is
   * parameter-dependent.
   * </pre>
   *
   * <code>repeated .google.api.SystemParameter parameters = 2;</code>
   */
  public com.google.api.SystemParameter getParameters(int index) {
    return parameters_.get(index);
  }
  /**
   * <pre>
   * Define parameters. Multiple names may be defined for a parameter.
   * For a given method call, only one of them should be used. If multiple
   * names are used the behavior is implementation-dependent.
   * If none of the specified names are present the behavior is
   * parameter-dependent.
   * </pre>
   *
   * <code>repeated .google.api.SystemParameter parameters = 2;</code>
   */
  public com.google.api.SystemParameterOrBuilder getParametersOrBuilder(
      int index) {
    return parameters_.get(index);
  }
  private void ensureParametersIsMutable() {
    if (!parameters_.isModifiable()) {
      parameters_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(parameters_);
     }
  }

  /**
   * <pre>
   * Define parameters. Multiple names may be defined for a parameter.
   * For a given method call, only one of them should be used. If multiple
   * names are used the behavior is implementation-dependent.
   * If none of the specified names are present the behavior is
   * parameter-dependent.
   * </pre>
   *
   * <code>repeated .google.api.SystemParameter parameters = 2;</code>
   */
  private void setParameters(
      int index, com.google.api.SystemParameter value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureParametersIsMutable();
    parameters_.set(index, value);
  }
  /**
   * <pre>
   * Define parameters. Multiple names may be defined for a parameter.
   * For a given method call, only one of them should be used. If multiple
   * names are used the behavior is implementation-dependent.
   * If none of the specified names are present the behavior is
   * parameter-dependent.
   * </pre>
   *
   * <code>repeated .google.api.SystemParameter parameters = 2;</code>
   */
  private void setParameters(
      int index, com.google.api.SystemParameter.Builder builderForValue) {
    ensureParametersIsMutable();
    parameters_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * Define parameters. Multiple names may be defined for a parameter.
   * For a given method call, only one of them should be used. If multiple
   * names are used the behavior is implementation-dependent.
   * If none of the specified names are present the behavior is
   * parameter-dependent.
   * </pre>
   *
   * <code>repeated .google.api.SystemParameter parameters = 2;</code>
   */
  private void addParameters(com.google.api.SystemParameter value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureParametersIsMutable();
    parameters_.add(value);
  }
  /**
   * <pre>
   * Define parameters. Multiple names may be defined for a parameter.
   * For a given method call, only one of them should be used. If multiple
   * names are used the behavior is implementation-dependent.
   * If none of the specified names are present the behavior is
   * parameter-dependent.
   * </pre>
   *
   * <code>repeated .google.api.SystemParameter parameters = 2;</code>
   */
  private void addParameters(
      int index, com.google.api.SystemParameter value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureParametersIsMutable();
    parameters_.add(index, value);
  }
  /**
   * <pre>
   * Define parameters. Multiple names may be defined for a parameter.
   * For a given method call, only one of them should be used. If multiple
   * names are used the behavior is implementation-dependent.
   * If none of the specified names are present the behavior is
   * parameter-dependent.
   * </pre>
   *
   * <code>repeated .google.api.SystemParameter parameters = 2;</code>
   */
  private void addParameters(
      com.google.api.SystemParameter.Builder builderForValue) {
    ensureParametersIsMutable();
    parameters_.add(builderForValue.build());
  }
  /**
   * <pre>
   * Define parameters. Multiple names may be defined for a parameter.
   * For a given method call, only one of them should be used. If multiple
   * names are used the behavior is implementation-dependent.
   * If none of the specified names are present the behavior is
   * parameter-dependent.
   * </pre>
   *
   * <code>repeated .google.api.SystemParameter parameters = 2;</code>
   */
  private void addParameters(
      int index, com.google.api.SystemParameter.Builder builderForValue) {
    ensureParametersIsMutable();
    parameters_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * Define parameters. Multiple names may be defined for a parameter.
   * For a given method call, only one of them should be used. If multiple
   * names are used the behavior is implementation-dependent.
   * If none of the specified names are present the behavior is
   * parameter-dependent.
   * </pre>
   *
   * <code>repeated .google.api.SystemParameter parameters = 2;</code>
   */
  private void addAllParameters(
      java.lang.Iterable<? extends com.google.api.SystemParameter> values) {
    ensureParametersIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, parameters_);
  }
  /**
   * <pre>
   * Define parameters. Multiple names may be defined for a parameter.
   * For a given method call, only one of them should be used. If multiple
   * names are used the behavior is implementation-dependent.
   * If none of the specified names are present the behavior is
   * parameter-dependent.
   * </pre>
   *
   * <code>repeated .google.api.SystemParameter parameters = 2;</code>
   */
  private void clearParameters() {
    parameters_ = emptyProtobufList();
  }
  /**
   * <pre>
   * Define parameters. Multiple names may be defined for a parameter.
   * For a given method call, only one of them should be used. If multiple
   * names are used the behavior is implementation-dependent.
   * If none of the specified names are present the behavior is
   * parameter-dependent.
   * </pre>
   *
   * <code>repeated .google.api.SystemParameter parameters = 2;</code>
   */
  private void removeParameters(int index) {
    ensureParametersIsMutable();
    parameters_.remove(index);
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!selector_.isEmpty()) {
      output.writeString(1, getSelector());
    }
    for (int i = 0; i < parameters_.size(); i++) {
      output.writeMessage(2, parameters_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (!selector_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getSelector());
    }
    for (int i = 0; i < parameters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, parameters_.get(i));
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.google.api.SystemParameterRule parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.SystemParameterRule parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.SystemParameterRule parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.SystemParameterRule parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.SystemParameterRule parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.SystemParameterRule parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.api.SystemParameterRule parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.api.SystemParameterRule parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.api.SystemParameterRule parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.SystemParameterRule parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.api.SystemParameterRule prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Define a system parameter rule mapping system parameter definitions to
   * methods.
   * </pre>
   *
   * Protobuf type {@code google.api.SystemParameterRule}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.api.SystemParameterRule, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.api.SystemParameterRule)
      com.google.api.SystemParameterRuleOrBuilder {
    // Construct using com.google.api.SystemParameterRule.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Selects the methods to which this rule applies. Use '*' to indicate all
     * methods in all APIs.
     * Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
     * </pre>
     *
     * <code>optional string selector = 1;</code>
     */
    public java.lang.String getSelector() {
      return instance.getSelector();
    }
    /**
     * <pre>
     * Selects the methods to which this rule applies. Use '*' to indicate all
     * methods in all APIs.
     * Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
     * </pre>
     *
     * <code>optional string selector = 1;</code>
     */
    public com.google.protobuf.ByteString
        getSelectorBytes() {
      return instance.getSelectorBytes();
    }
    /**
     * <pre>
     * Selects the methods to which this rule applies. Use '*' to indicate all
     * methods in all APIs.
     * Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
     * </pre>
     *
     * <code>optional string selector = 1;</code>
     */
    public Builder setSelector(
        java.lang.String value) {
      copyOnWrite();
      instance.setSelector(value);
      return this;
    }
    /**
     * <pre>
     * Selects the methods to which this rule applies. Use '*' to indicate all
     * methods in all APIs.
     * Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
     * </pre>
     *
     * <code>optional string selector = 1;</code>
     */
    public Builder clearSelector() {
      copyOnWrite();
      instance.clearSelector();
      return this;
    }
    /**
     * <pre>
     * Selects the methods to which this rule applies. Use '*' to indicate all
     * methods in all APIs.
     * Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
     * </pre>
     *
     * <code>optional string selector = 1;</code>
     */
    public Builder setSelectorBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setSelectorBytes(value);
      return this;
    }

    /**
     * <pre>
     * Define parameters. Multiple names may be defined for a parameter.
     * For a given method call, only one of them should be used. If multiple
     * names are used the behavior is implementation-dependent.
     * If none of the specified names are present the behavior is
     * parameter-dependent.
     * </pre>
     *
     * <code>repeated .google.api.SystemParameter parameters = 2;</code>
     */
    public java.util.List<com.google.api.SystemParameter> getParametersList() {
      return java.util.Collections.unmodifiableList(
          instance.getParametersList());
    }
    /**
     * <pre>
     * Define parameters. Multiple names may be defined for a parameter.
     * For a given method call, only one of them should be used. If multiple
     * names are used the behavior is implementation-dependent.
     * If none of the specified names are present the behavior is
     * parameter-dependent.
     * </pre>
     *
     * <code>repeated .google.api.SystemParameter parameters = 2;</code>
     */
    public int getParametersCount() {
      return instance.getParametersCount();
    }/**
     * <pre>
     * Define parameters. Multiple names may be defined for a parameter.
     * For a given method call, only one of them should be used. If multiple
     * names are used the behavior is implementation-dependent.
     * If none of the specified names are present the behavior is
     * parameter-dependent.
     * </pre>
     *
     * <code>repeated .google.api.SystemParameter parameters = 2;</code>
     */
    public com.google.api.SystemParameter getParameters(int index) {
      return instance.getParameters(index);
    }
    /**
     * <pre>
     * Define parameters. Multiple names may be defined for a parameter.
     * For a given method call, only one of them should be used. If multiple
     * names are used the behavior is implementation-dependent.
     * If none of the specified names are present the behavior is
     * parameter-dependent.
     * </pre>
     *
     * <code>repeated .google.api.SystemParameter parameters = 2;</code>
     */
    public Builder setParameters(
        int index, com.google.api.SystemParameter value) {
      copyOnWrite();
      instance.setParameters(index, value);
      return this;
    }
    /**
     * <pre>
     * Define parameters. Multiple names may be defined for a parameter.
     * For a given method call, only one of them should be used. If multiple
     * names are used the behavior is implementation-dependent.
     * If none of the specified names are present the behavior is
     * parameter-dependent.
     * </pre>
     *
     * <code>repeated .google.api.SystemParameter parameters = 2;</code>
     */
    public Builder setParameters(
        int index, com.google.api.SystemParameter.Builder builderForValue) {
      copyOnWrite();
      instance.setParameters(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Define parameters. Multiple names may be defined for a parameter.
     * For a given method call, only one of them should be used. If multiple
     * names are used the behavior is implementation-dependent.
     * If none of the specified names are present the behavior is
     * parameter-dependent.
     * </pre>
     *
     * <code>repeated .google.api.SystemParameter parameters = 2;</code>
     */
    public Builder addParameters(com.google.api.SystemParameter value) {
      copyOnWrite();
      instance.addParameters(value);
      return this;
    }
    /**
     * <pre>
     * Define parameters. Multiple names may be defined for a parameter.
     * For a given method call, only one of them should be used. If multiple
     * names are used the behavior is implementation-dependent.
     * If none of the specified names are present the behavior is
     * parameter-dependent.
     * </pre>
     *
     * <code>repeated .google.api.SystemParameter parameters = 2;</code>
     */
    public Builder addParameters(
        int index, com.google.api.SystemParameter value) {
      copyOnWrite();
      instance.addParameters(index, value);
      return this;
    }
    /**
     * <pre>
     * Define parameters. Multiple names may be defined for a parameter.
     * For a given method call, only one of them should be used. If multiple
     * names are used the behavior is implementation-dependent.
     * If none of the specified names are present the behavior is
     * parameter-dependent.
     * </pre>
     *
     * <code>repeated .google.api.SystemParameter parameters = 2;</code>
     */
    public Builder addParameters(
        com.google.api.SystemParameter.Builder builderForValue) {
      copyOnWrite();
      instance.addParameters(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Define parameters. Multiple names may be defined for a parameter.
     * For a given method call, only one of them should be used. If multiple
     * names are used the behavior is implementation-dependent.
     * If none of the specified names are present the behavior is
     * parameter-dependent.
     * </pre>
     *
     * <code>repeated .google.api.SystemParameter parameters = 2;</code>
     */
    public Builder addParameters(
        int index, com.google.api.SystemParameter.Builder builderForValue) {
      copyOnWrite();
      instance.addParameters(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Define parameters. Multiple names may be defined for a parameter.
     * For a given method call, only one of them should be used. If multiple
     * names are used the behavior is implementation-dependent.
     * If none of the specified names are present the behavior is
     * parameter-dependent.
     * </pre>
     *
     * <code>repeated .google.api.SystemParameter parameters = 2;</code>
     */
    public Builder addAllParameters(
        java.lang.Iterable<? extends com.google.api.SystemParameter> values) {
      copyOnWrite();
      instance.addAllParameters(values);
      return this;
    }
    /**
     * <pre>
     * Define parameters. Multiple names may be defined for a parameter.
     * For a given method call, only one of them should be used. If multiple
     * names are used the behavior is implementation-dependent.
     * If none of the specified names are present the behavior is
     * parameter-dependent.
     * </pre>
     *
     * <code>repeated .google.api.SystemParameter parameters = 2;</code>
     */
    public Builder clearParameters() {
      copyOnWrite();
      instance.clearParameters();
      return this;
    }
    /**
     * <pre>
     * Define parameters. Multiple names may be defined for a parameter.
     * For a given method call, only one of them should be used. If multiple
     * names are used the behavior is implementation-dependent.
     * If none of the specified names are present the behavior is
     * parameter-dependent.
     * </pre>
     *
     * <code>repeated .google.api.SystemParameter parameters = 2;</code>
     */
    public Builder removeParameters(int index) {
      copyOnWrite();
      instance.removeParameters(index);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.api.SystemParameterRule)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.api.SystemParameterRule();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        parameters_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.google.api.SystemParameterRule other = (com.google.api.SystemParameterRule) arg1;
        selector_ = visitor.visitString(!selector_.isEmpty(), selector_,
            !other.selector_.isEmpty(), other.selector_);
        parameters_= visitor.visitList(parameters_, other.parameters_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readStringRequireUtf8();

                selector_ = s;
                break;
              }
              case 18: {
                if (!parameters_.isModifiable()) {
                  parameters_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(parameters_);
                }
                parameters_.add(
                    input.readMessage(com.google.api.SystemParameter.parser(), extensionRegistry));
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.google.api.SystemParameterRule.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.api.SystemParameterRule)
  private static final com.google.api.SystemParameterRule DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new SystemParameterRule();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.google.api.SystemParameterRule getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<SystemParameterRule> PARSER;

  public static com.google.protobuf.Parser<SystemParameterRule> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

